print(mathcedtab1, smd=TRUE)
set.seed(931139)
psmatch<-Match(Tr=mydata$treat, M=1, X=pscore, replace=FALSE)
psmatch<-Match(Tr=mydata$treat, M=1, X=pscore, replace=FALSE)
names(mydata)
xvars<-c("age", "educ", "black", "hispanic", "white", "married", "nodegr", "re74", "re75", "re78")
psmatch<-Match(Tr=mydata$treat, M=1, X=pscore, replace=FALSE)
matched<-mydata[unlist(psmatch[c('index.treated','index.control')],use.names = FALSE),]
xvars<-c("age", "educ", "black", "hispanic", "white", "married", "nodegr", "re74", "re75", "re78")
matchedtab1<-CreateTableOne(vars=xvars, strata='treat', data=matched, test=FALSE)
print(mathcedtab1, smd=TRUE)
mydata
psmatch
View(psmatch)
View(psmatch)
matched<-mydata[unlist(psmatch[c('index.treated','index.control')],use.names = FALSE),]
xvars<-c("age", "educ", "black", "hispanic", "white", "married", "nodegr", "re74", "re75", "re78")
matched
xvars<-c("age", "educ", "black", "hispanic", "white", "married", "nodegr", "re74", "re75")
matchedtab1<-CreateTableOne(vars=xvars, strata='treat', data=matched, test=FALSE)
print(mathcedtab1, smd=TRUE)
set.seed(931139)
psmatch<-Match(Tr=mydata$treat, M=1, X=pscore, replace=FALSE)
matched<-mydata[unlist(psmatch[c('index.treated','index.control')],use.names = FALSE),]
xvars<-c("age", "educ", "black", "hispanic", "white", "married", "nodegr", "re74", "re75")
matchedtab2<-CreateTableOne(vars=xvars, strata='treat', data=matched, test=FALSE)
print(matchedtab2, smd=TRUE)
set.seed(931139)
psmatch<-Match(Tr=mydata$treat, M=1, X=pscore, replace=FALSE, caliper=0.1)
matched<-mydata[unlist(psmatch[c('index.treated','index.control')],use.names = FALSE),]
xvars<-c("age", "educ", "black", "hispanic", "white", "married", "nodegr", "re74", "re75")
matchedtab2<-CreateTableOne(vars=xvars, strata='treat', data=matched, test=FALSE)
print(matchedtab2, smd=TRUE)
y_treat<-matched$re78[matched$treat==1]
y_cont<-matched$re78[matched$treat==0]
diffy<-y_treat-y_cont
t.test(diffy)
diffy
mean(diffy)
install.packages('ipw')
install.packages('survey')
library(tableone)
library(Matching)
library(ipw)
library(survey)
library(MatchIt)
data(lalonde, package="MatchIt")
names(lalonde)
unique(lalonde$race)
View(lalonde)
View(lalonde)
age<-lalonde$age
educ<-lalonde$educ
black<-as.numeric(lalonde$race=='black')
hispanic<-as.numeric(lalonde$race=='hispan')
white<-as.numeric(lalonde$race=='white')
married<-lalonde$married
nodegr<-lalonde$nodegr
re74<-lalonde$re74
re75<-lalonde$re75
re78<-lalonde$re78
treat<-lalonde$treat
mydata<-cbind(age, educ, black, hispanic, white, married, nodegr, re74, re75, re78, treat)
mydata<-data.frame(mydata)
xvars<-c("age", "educ", "black", "hispanic", "married", "nodegr", "re74", "re75")
psmodel<-glm(treat~age+educ+black+hispanic+married+nodegr+re74+re75, family=binomial(), data=mydata)
summary(psmodel)
pscore<-psmodel$fitted.values
pscore_inv <- 1/pscore
pscore
pscore_inv
min(pscore_inv)
max(pscore_inv)
one_min_pscore <- 1-pscore
one_min_pscore_inv<- 1/pscore_inv
min(one_min_pscore_inv)
max(one_min_pscore_inv)
psmodel<-glm(treat~age+educ+black+hispanic+married+nodegr+re74+re75, family=binomial(link='logit'), data=mydata)
summary(psmodel)
pscore<-psmodel$fitted.values
one_min_pscore <- 1-pscore
pscore_inv <- 1/pscore
one_min_pscore_inv<- 1/pscore_inv
min(one_min_pscore_inv)
max(one_min_pscore_inv)
min(pscore_inv)
max(pscore_inv)
weights<-ifelse(treat==1, 1/pscore, 1/(1-pscore))
min(weights)
max(weights)
weightdata<-svydesign(ids=~1, data=mydata,weights=~weights)
weightedtable <- svyCreateTableOne(vars=xvars, strata='treatment', data=weighteddata, test=FALSE)
weightdata<-svydesign(ids=~1, data=mydata,weights=~weights)
weightdata<-svydesign(ids=~1, data=mydata, weights=~weights)
weightdata<-svydesign(ids=~1, data=mydata, weights=~weights)
weightedtable <- svyCreateTableOne(vars=xvars, strata='treatment', data=weightdata, test=FALSE)
weightedtable <- svyCreateTableOne(vars=xvars, strata='treat', data=weightdata, test=FALSE)
print(weightedtable, smd=TRUE)
weightedmodel <- ipwpoint(exposure=treat,
family='binomial',
link='logit',
denominator=~age+educ+black+hispanic+married+nodegr+re74+re75,
data=mydata)
summary(weightedmodel$ipw.weights)
ipwplot(weights=weightedmodel$ipw.weights, logscale=FALSE, main='weights', xlim=c(0,22))
ipwplot(weights=weightedmodel$ipw.weights, logscale=FALSE, main='weights', xlim=c(0,22))
ipwplot(weights=weightedmodel$ipw.weights, logscale=FALSE, main='weights', xlim=c(0,42))
msm<-(svyglm(died~treat, design=svydesign(~1, weights=~wt, data=mydata)))
msm<-(svyglm(died~treat, design=svydesign(~1, weights=~weights, data=mydata)))
msm<-(svyglm(died~treat, design=svydesign(~1, weights=~weights, data=mydata)))
msm<-(svyglm(died~treat, design=svydesign(ids = ~1, weights=~weights, data=mydata)))
msm<-(svyglm(re78~treat, design=svydesign(ids = ~1, weights=~weights, data=mydata)))
coeff(msm)
coef(msm)
confint(msm)
glm.obj<-glm(re78~treat, weights=trucnweights, family=binomial(link='identity'))
truncweights <-replace(weights, weights>10, 10)
glm.obj<-glm(re78~treat, weights=trucnweights, family=binomial(link='identity'))
glm.obj<-glm(re78~treat, weights=truncweights, family=binomial(link='identity'))
truncweights <-replace(weights, weights>10, 10)
truncweights <-replace(weights, weights>0.01, 0.01)
glm.obj<-glm(re78~treat, weights=truncweights, family=binomial(link='identity'))
weightedmodel <- ipwpoint(exposure=treat,
family='binomial',
link='logit',
denominator=~age+educ+black+hispanic+married+nodegr+re74+re75,
data=mydata, trunc = 0.01)
# summary of weights
summary(weightedmodel$ipw.weights)
ipwplot(weights=weightedmodel$ipw.weights, logscale=FALSE, main='weights', xlim=c(0,42))
msm<-(svyglm(re78~treat, design=svydesign(ids = ~1, weights=~weights, data=mydata)))
coef(msm)
confint(msm)
summary(weightedmodel$weights.trunc)
weightedmodel <- ipwpoint(exposure=treat,
family='binomial',
link='logit',
denominator=~age+educ+black+hispanic+married+nodegr+re74+re75,
data=mydata)
summary(weightedmodel$weights.trunc)
weightedmodel <- ipwpoint(exposure=treat,
family='binomial',
link='logit',
denominator=~age+educ+black+hispanic+married+nodegr+re74+re75,
data=mydata, truc=0.01)
weightdata<-svydesign(ids=~1, data=mydata, weights=~weights)
# weighting table 1
weightedtable <- svyCreateTableOne(vars=xvars, strata='treat', data=weightdata, test=FALSE)
print(weightedtable, smd=TRUE)
weightedmodel <- ipwpoint(exposure=treat,
family='binomial',
link='logit',
denominator=~age+educ+black+hispanic+married+nodegr+re74+re75,
data=mydata)
summary(weightedmodel$ipw.weights)
weightedmodel <- ipwpoint(exposure=treat,
family='binomial',
link='logit',
denominator=~age+educ+black+hispanic+married+nodegr+re74+re75,
data=mydata, truc=0.01)
weightedmodel <- ipwpoint(exposure=treat,
family='binomial',
link='logit',
denominator=~age+educ+black+hispanic+married+nodegr+re74+re75,
data=mydata, trunc=0.01)
summary(weightedmodel$weights.trunc)
ipwplot(weights=weightedmodel$weights.trunc, logscale=FALSE, main='weights', xlim=c(0,42))
ipwplot(weights=weightedmodel$weights.trunc, logscale=FALSE, main='weights', xlim=c(0,13))
mydata$wt = weightedmodel$weights.trunc
msm<-(svyglm(re78~treat, design=svydesign(ids = ~1, weights=~weights, data=mydata)))
coef(msm)
confint(msm)
msm<-(svyglm(re78~treat, design=svydesign(ids = ~1, weights=~wt, data=mydata)))
coef(msm)
confint(msm)
library(tidyverse)
install.packages('tidyverse')
library(tidyverse)
data<-tibble(x=rnorm(1000))%>%
View(data)
View(data)
data<-tibble(x=rnorm(1000))%>%
mutate(Y=.2*X+rnorm(1000))%>%
mutate(W=(rnorm(1000)+Y+3*X)>0)
library(tidyverse)
data<-tibble(x=rnorm(1000))%>%
mutate(Y=.2*X+rnorm(1000))%>%
mutate(W=(rnorm(1000)+Y+3*X)>0)
data<-tibble(X=rnorm(1000))%>%
mutate(Y=.2*X+rnorm(1000))%>%
mutate(W=(rnorm(1000)+Y+3*X)>0)
View(data)
View(data)
data<-data%>%
group_by(w)%>%
mutate(X.exp=mean(X),
Y.exp=mean(Y))%>%
ungroup() %>%
mutate(X.r=X-X.exp,
Y.r=Y-Y.exp)
data<-data%>%
group_by(W)%>%
mutate(X.exp=mean(X),
Y.exp=mean(Y))%>%
ungroup() %>%
mutate(X.r=X-X.exp,
Y.r=Y-Y.exp)
cor(data$X, data$Y)
cor(data$X.r, data$Y.r)
library(tidyverse)
df<-tibble(R=sample(c(0,1),500,replace=T))%>%
mutate(x=R)%>%
mutate(X=ifelse(runif(500)>.8, 1-R, R))%>%
mutate(Y=5*X+rnorm(500))
View(df)
View(df)
df<-tibble(R=sample(c(0,1),500,replace=T))%>%
# we tell them whether or not to get treated
mutate(X=R)%>%
# but some of them don't listen 20% are opposite
mutate(X=ifelse(runif(500)>.8, 1-R, R))%>%
mutate(Y=5*X+rnorm(500))
# the truth is a difference of 5
df%>%group_by(R)%>%summarize(Y=mean(Y))
iv<-df%>% group_by(R) %>% summarize(Y=mean(Y), X=mean(X))
iv$Y[2]-iv$Y[1]
(iv$Y[2]-iv$Y[1])/(iv$X[2]-iv$X[1])
# installing the R package for Survival analysis
install.packages(c("survival", "survminer"))
install.packages(c("survival", "survminer"))
install.packages(c("survival", "survminer"))
install.packages(c("survival", "survminer"))
1+2
data(diabetic, package='survival')
View(data)
View(data)
library("survival")
library("survminer")
data(diabetic, package='survival')
View(data)
View(data)
# installing the R package for Survival analysis
install.packages(c("survival", "survminer"))
library("survival")
library("survminer")
data<-data(diabetic, package='survival')
data<-data(diabetic, package='survival')
data
data("lung")
data("diabetic")
data
library("survival")
library("survminer")
data("diabetic")
View(data_small)
install.packages("survival")
install.packages("survival")
install.packages("survival")
View(diabetic)
View(diabetic)
install.packages("survniber")
install.packages("survminer")
View(diabetic)
View(diabetic)
diabetic
data(diabetic, package='survival')
diabetic
View(data_small)
View(data_small)
View(diabetic)
View(diabetic)
head(diabetic)
names(diabetic)
library("survival")
library("survminer")
data(diabetic, package='survival')
head(diabetic)
names(diabetic)
view(diabetic)
library("survival")
library("survminer")
data(diabetic, package='survival')
head(diabetic)
names(diabetic)
diabetic <- filter(diabetic, trt==1)
names(diabetic)
diabetic <- filter(diabetic, trt==1)
filter(diabetic, trt==1)
filter(diabetic, trt=="1")
filter(diabetic, "trt"==1)
diabetic
diabetic <- diabetic[diabetic$trt==1]
diabetic <- diabetic[diabetic$trt==1]
diabetic$trt
diabetic <- filter(diabetic,diabetic$trt==1)
diabetic
data(diabetic, package='survival')
diabetic
diabetic2 <- filter(diabetic.trt==1)
diabetic2 <- diabetic.trt
diabetic2 <- diabetic$trt
diabetic2
diabetic2 <- diabetic$trt==1
diabetic2
diabetic2 <- subset(diabetic, trt==1)
diabetic2
fit<-sruvfit(Surv(time, status), data=diabetic2)
fit<-survfit(Surv(time, status), data=diabetic2)
names(diabetic)
View(diabetic2)
View(diabetic2)
survfit(Surv(time, status), data=diabetic2)
fit<-survfit(Surv(time, status) ~ laser, data=diabetic2)
print(fit)
summary(fit)
summary(fit)$table
fit
d <- data.frame(time = fit$time,
n.risk = fit$n.risk,
n.event = fit$n.event,
n.censor = fit$n.censor,
surv = fit$surv,
upper = fit$upper,
lower = fit$lower
)
head(d)
ggsurvplot(fit,
pval = TRUE, conf.int = TRUE,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
linetype = "strata", # Change line type by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
palette = c("#E7B800", "#2E9FDF"))
ggsurvplot(fit,
conf.int = TRUE,
risk.table.col = "strata", # Change risk table color by groups
ggtheme = theme_bw(), # Change ggplot2 theme
palette = c("#E7B800", "#2E9FDF"),
xlim = c(0, 600))
ggsurvplot(fit,
conf.int = TRUE,
risk.table.col = "strata", # Change risk table color by groups
ggtheme = theme_bw(), # Change ggplot2 theme
palette = c("#E7B800", "#2E9FDF"),
xlim = c(0, 600))
ggsurvplot(fit,
pval = TRUE, conf.int = TRUE,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
linetype = "strata", # Change line type by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
palette = c("#E7B800", "#2E9FDF"))
ggsurvplot(fit,
pval = TRUE, conf.int = TRUE,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
linetype = "strata", # Change line type by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
palette = c("#E7B800", "#2E9FDF"))
surv_diff <- survdiff(Surv(time, status) ~ laser, data = diabetic2)
surv_diff
summary(fit)
summary(fit)$table
d <- data.frame(time = fit$time,
n.risk = fit$n.risk,
n.event = fit$n.event,
n.censor = fit$n.censor,
surv = fit$surv,
upper = fit$upper,
lower = fit$lower
)
d
ggsurvplot(fit,
pval = TRUE, conf.int = TRUE,
risk.table = TRUE, # Add risk table
risk.table.col = "strata", # Change risk table color by groups
linetype = "strata", # Change line type by groups
surv.median.line = "hv", # Specify median survival
ggtheme = theme_bw(), # Change ggplot2 theme
palette = c("#E7B800", "#2E9FDF")
)
surv_diff <- survdiff(Surv(time, status) ~ laser, data = diabetic2)
surv_diff <- survdiff(Surv(time, status) ~ laser, data = diabetic2)
surv_diff
library("survival")
library("survminer")
data(diabetic, package='survival')
library("survival")
library("survminer")
head(diabetic)
names(diabetic)
diabetic2 <- subset(diabetic, trt==1)
fit<-survfit(Surv(time, status) ~ laser, data=diabetic2)
summary(fit)
summary(fit)$table
library('survival')
library('survminer')
data(cancer, package="survival")
cancer
cancer <- data(cancer, package="survival")
cancer
cancer <- data(cancer, package="survival")
cancer
data(cancer, package="survival")
data(cancer, package="survival")
cancer
name(cancer)
names(cancer)
gbsg
gbsg
head(gbsg)
head(gbsg)
head(gbsg)
res.cox <- coxph(Surv(rfstime,status)~age+meno+size+grade+nodes+pgr+er+hormon, data=gbsg)
res.cox
summary(res.cox)
summary(res.cox)
res.cox <- coxph(Surv(rfstime,status)~age+meno+size+grade+nodes+pgr+er+hormon, data=gbsg)
res.cox <- coxph(Surv(rfstime,status)~age+meno+size+grade+nodes+pgr+er+hormon, data=gbsg)
library('survival')
library('survminer')
library('survival')
library('survminer')
data(cancer, package="survival")
data(cancer, package="survival")
data(cancer, package="survival")
head(gbsg)
res.cox <- coxph(Surv(rfstime,status)~age+meno+size+grade+nodes+pgr+er+hormon, data=gbsg)
res.cox
summary(res.cox)
res.cox <- coxph(Surv(rfstime,status)~age+meno+size+grade+nodes+pgr+er+hormon, data=gbsg)
res.cox
res.cox
res.cox
res.cox <- coxph(Surv(rfstime,status)~grade+nodes+pgr+hormon, data=gbsg)
res.cox
res.cox <- coxph(Surv(rfstime,status)~age+grade+nodes+pgr+hormon, data=gbsg)
res.cox
res.cox <- coxph(Surv(rfstime,status)~meno+grade+nodes+pgr+hormon, data=gbsg)
res.cox
res.cox <- coxph(Surv(rfstime,status)~size+grade+nodes+pgr+hormon, data=gbsg)
res.cox
res.cox <- coxph(Surv(rfstime,status)~er+grade+nodes+pgr+hormon, data=gbsg)
res.cox
summary(res.cox)
ggsurvplot(survfit(res.cox),
color = "#2E9FDF",
ggtheme = theme_minimal()
)
ggsurvplot(survfit(res.cox),
color = "#2E9FDF",
ggtheme = theme_minimal()
)
ggsurvfit(survfit(res.cox),
color = "#2E9FDF",
ggtheme = theme_minimal()
)
ggsurvplot(survfit(res.cox), color = "#2E9FDF", ggtheme = theme_minimal())
ggsurvplot(survfit(res.cox), color = "#2E9FDF", ggtheme = theme_minimal())
library('survminer')
ggsurvplot(survfit(res.cox), color = "#2E9FDF", ggtheme = theme_minimal())
ggsurvplot(survfit(res.cox, data = lung), palette = "#2E9FDF")
ggsurvplot(survfit(res.cox, data=gbsg), color = "#2E9FDF", ggtheme = theme_minimal())
ggsurvplot(survfit(res.cox, data=gbsg), color = "#2E9FDF", ggtheme = theme_minimal())
install.packages("rstan", repos = c("https://mc-stan.org/r-packages/", getOption("repos")))
library('rstan')
library(devtools)
installed.packages('devtools')
install.packages('devtools')
install.packages("devtools")
install_github("rstanarm","stan-dev")
library(devtools)
install_github("rstanarm","stan-dev")
install.packages('rstanarm')
library('rstan')
library('rstanarm')
library('rstanarm')
library('rstan')
library('rstanarm')
data<-read.csv('advertising_data.csv')
getwd()
setwd('D://')
getwd()
setwd('D://Projects/Bayesian-Marketing-Mix-Modeling')
data<-read.csv('advertising_data.csv')
data<-read.csv('advertising_data.csv')
data
data$Week
data {
int N; //the number of observations
int N2; //the size of the new_X matrix
int K; //the number of columns in the model matrix
real y[N]; //the response
matrix[N,K] X; //the model matrix
matrix[N2,K] new_X; //the matrix for the predicted values
}
library(coda)
install.packages('coda')
library(coda)
library(coda)
set.seed(20151204)
dat<-data.frame(x1=runif(100,-2,2),x2=runif(100,-2,2))
dat
X<-model.matrix(~x1*x2,dat)
betas<-runif(4,-1,1)
sigma<-1
y_norm<-rnorm(100,X%*%betas,sigma)
new_X<-model.matrix(~x1*x2,expand.grid(x1=seq(min(dat$x1),max(dat$x1),length=20),x2=c(min(dat$x2),mean(dat$x2),max(dat$x2))))
m_norm<-stan(file="normal_regression.stan",data = list(N=100,N2=60,K=4,y=y_norm,X=X,new_X=new_X),pars = c("beta","sigma","y_pred"))
